stages:
  - fetch-version
  - dep
  - build
  - test
  - release

variables:
  DOCKER_TLS_CERTDIR: ""
  PACKAGE_PATH: /go/src/gitlab.com/$CI_PROJECT_PATH
  
.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/

.anchors:
  - &inject-gopath
      mkdir -p $(dirname ${PACKAGE_PATH})
      && ln -s ${CI_PROJECT_DIR} ${PACKAGE_PATH}
      && cd ${PACKAGE_PATH}
    
cache:
  key: "$CI_JOB_NAME"

fetch-semantic-version:
  # Requires Node >= 10.13 version
  image: node:13
  stage: fetch-version
  only:
    refs:
    - master
    - alpha
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
    - VERSION.txt

generate-non-semantic-version:
  stage: fetch-version
  except:
    refs:
    - master
    - alpha
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - echo build-$CI_PIPELINE_ID > VERSION.txt
  artifacts:
    paths:
    - VERSION.txt

# version:
#   stage: version
#   image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
#   script:
#     #- printenv
#     - release test-git || true
#     - release test-api
#     - release next-version --allow-current
#     - release next-version --allow-current > .next-version
#     - echo "RELEASE_URL=$CI_PROJECT_URL/-/tags/v$(<.next-version)" > build_info
#     - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
#     - echo "RELEASE_SHA=$CI_COMMIT_SHORT_SHA" >> build_info
#     - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
#   artifacts:
#     paths:
#     - .next-version
#     - build_info
#   except:
#     - tags

compile:
  stage: build
  image:  golang:1.13
  script:
  - (cd /; go get github.com/mitchellh/gox)
  - GO_FLAGS=-mod=vendor CGO_ENABLED=0 gox -arch=amd64 -os="linux windows darwin" -output="build/{{.OS}}_{{.Arch}}/if0" -ldflags "-X main.version=v$(<.next-version)"
  - cp build/linux_amd64/if0 .
  #- go build -mod=vendor ./cmd/gendoc
  - ./if0 addConfig || true
  - ./if0 help
  artifacts:
    paths:
    - if0
    - build_info
    #- gendoc
    - build
  except:
  - tags

include:
  - template: Container-Scanning.gitlab-ci.yml

unit-tests:
  image: golang:1.14
  stage: test
  script:
    - go test -race $(go list ./... | grep -v /vendor/) -v -coverprofile=coverage.out
    - go tool cover -func=coverage.out

# build:
#   stage: build
#   image:  golang:1.13
#   script:
#     - go build -i -v $PACKAGE_PATH
# build:
#   stage: build
#   image: docker:19.03.6
#   variables:
#     DOCKER_BUILDKIT: 1
#     # For Container Scanning
#     IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
#   services:
#     - docker:19.03.6-dind
#   script:
#     - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
#     - export BASE_IMAGE=$(grep -oE 'FROM .+$' Dockerfile | head -n 1 | cut -d ' ' -f 2)
#     - docker pull $CI_REGISTRY_IMAGE:latest || true
#     - docker pull $BASE_IMAGE
#     - docker build --cache-from $CI_REGISTRY_IMAGE:latest,$BASE_IMAGE --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $IMAGE_TAG -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f Dockerfile .
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
#     - docker push $IMAGE_TAG

# include:
#   - template: Container-Scanning.gitlab-ci.yml

# release image:
#   stage: release
#   image: docker:19.03.6
#   services:
#     - docker:19.03.6-dind
#   script:
#     - . build_info
#     - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA || true
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
#     - docker push $CI_REGISTRY_IMAGE:latest
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
#     - docker push $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
#   only:
#     - master

# release dockerhub:
#   stage: release
#   image: docker:19.03.6
#   services:
#     - docker:19.03.6-dind
#   variables:
#     REGISTRY_USER: ${DOCKER_HUB_USER}
#     REGISTRY_PASSWORD: ${DOCKER_HUB_PASSWORD}
#     REGISTRY: docker.io
#     REGISTRY_IMAGE: index.docker.io/derfabianpeter/${CI_PROJECT_NAME}
#   script:
#     - . build_info
#     - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username=${CI_REGISTRY_USER} --password-stdin
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA || true
#     # Log in to Docker Hub
#     - echo "$REGISTRY_PASSWORD" | docker login $REGISTRY --username=${REGISTRY_USER} --password-stdin
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY_IMAGE:latest
#     - docker push $REGISTRY_IMAGE:latest
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY_IMAGE:v$RELEASE_VERSION
#     - docker push $REGISTRY_IMAGE:v$RELEASE_VERSION
#   only:
#     - master


release:
  image: node:13
  stage: release
  only:
    refs:
    - master
    - alpha
    # This matches maintenance branches
    - /^(([0-9]+)\.)?([0-9]+)\.x/
    # This matches pre-releases
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec
    - npx semantic-release

# release version:
#   stage: release
#   image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
#   script:
#     - rm -f release_info
#     - mv build_info release_info
#     - . release_info
#     - release changelog
#     - release commit-and-tag CHANGELOG.md release_info
#     - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n if0 -u $RELEASE_URL -d "$RELEASE_DESC"
#     - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n if0.exe -u $WIN_RELEASE_URL -d "$WIN_RELEASE_DESC"
#     - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n if0 -u $MAC_RELEASE_URL -d "$MAC_RELEASE_DESC"
#   only:
#     - master
#   tags:
#     - build
